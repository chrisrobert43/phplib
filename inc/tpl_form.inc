<?php
##
## Copyright (c) 1999 Internet Images Srl
##                    Massimiliano Masserelli
##
## Depends on ooh_forms
##
## $Id: tpl_form.inc,v 1.1 1999/07/31 15:57:26 negro Exp $
##

/*

dave's mods

getblob 
 - save an image to disk and store the filename in the blob
 - can also store the actual image in the blob if it fits.
show_image
 - output an image tag that points to the image file on disk
 - or to image.php which retrieves the image from the blob.
show_image_href
 - output a link to the image.

show_page
 - uses global $action variable to display a html include file.

link
 - Link a field on the form to column in another table

find_values
 - default function to load a record for this form
save_values
 - default function to save a record for this form
reload_values
 - load posted form data back into form display vars - used when a form validate fails.

*/

class tpl_form {
  var $classname = "tpl_form"; # Used for serialization AND in display()
                               # to determine the filename of template
                               # containing html/php code needed to 
                               # actually render the form

  var $form_data;            # Holds form info (form object), is
                             # initialized in the init() "constructor".
                             
  var $values = array();     # Must be inizialized by a call to the
                             # init() "constructor".
                             # All data that this form produces
                             # for application use shold be
                             # appended there
                             
  var $errors = array();
  var $error = "";           # Contains error messages generated by
                             # validate() and validate_input() methods.
                             
  var $errorfield = "";      # Contains field name that had an error.

  var $has_defaults = 0;     # Flag, form default values were passed
                             # via set_default_values() method. Should
                             # not be tampered with by the user.

  var $table = "";	     # SQL database table that holds the data
			     # from this form.
  var $key = "";	     # primary key fieldname for this table.

  var $db;

  var $database_class = "";  # Database storing image blobs and linked fields

  var $image_store = "disk"; # If set to "disk" then alway store on disk.
			     # otherwise attempt to store in SQL DB 1st.

  # This is a sort of constructor for the class. $values
  # is an array used to store form values. The class
  # writes data into it, but may also use it to obtain
  # data from the application
  function init($values) {
    if (! is_array($values)) {
      $this->values = array();
    } else {
      $this->values = $values;
    }
    return true;
  }

  # Init the form object, which will contain all fields info. The
  # hidden field form_name is used by other methods to determine
  # if form has been submitted by the user.
  # You shouldn't override this in descendants, use setup_fields()
  # instead.
  function setup($in_table=false,$js_sent=false,$save_class=false) {
    $this->form_data = new form;
    $this->form_data->key = $this->key;
    $this->form_data->add_element(array(
      "name"=>"form_name",
      "value"=>$this->classname,
      "type"=>"hidden"
    ));
    if ($in_table) $this->form_data->in_table = true;
    $this->form_data->save_class = $save_class;
    $this->setup_fields();
    $class = $this->classname;
    if (strtolower(substr($class,0,3))=="my_") $class=substr($class,3);
    if (strtolower(substr($class,0,2))=="my") $class=substr($class,2);
    if (!$this->database_class) $this->database_class = $_ENV["DatabaseClass"];
    if (!$this->database_class) return;
    $db = new $this->database_class;
    if (!$fk = $_ENV["MyForeignKeys"]) return;  # No automatic table linking
    $sql = "select * from $fk where FormName = '$class'";
    $db->query($sql);
    while ($db->next_record()) {
	extract($db->Record);
	if (array_key_exists($db->f("FieldName"),$this->form_data->elements))
	$this->link($db->f("LinkTable"),$db->f("LinkField"),$db->f("FieldName"),$db->f("LinkDesc"),
				$db->f("NullValue"),$db->f("NullDesc"),$db->f("LinkCondition"),
				$db->f("LinkErrorMsg"),$db->f("DefaultValue"),$db->f("EditRequires"));
    }
    return true;
  }

  # Override this method in order to provide form fields definition
  # that suit your needs.
  function setup_fields() {
    return true;
  }

  # Returns an array containing all data submitted by the user for
  # the form. This array is intended to be passed to set_defaults_values()
  # some time later.
  function get_default_values() {
    if (! is_object($this->form_data)) {
      $this->setup();
    }
    $fv = array();
    for (reset($this->form_data->elements); $elrec = current($this->form_data->elements); next($this->form_data->elements)) {
      $el = $elrec["ob"];
      $vn = $el->name;
      global $$vn;
      $fv[$el->name] = $$vn;
    }
    return $fv;
  }

  # Restore form defaults from an array as returned by get_default_values()
  function set_default_values($fv) {
    if (! is_object($this->form_data)) {
      $this->setup();
    }
    if (! is_array($fv)) {
      return false;
    }
    while (list($var, $value) = each($fv)) {
      global $$var;
      $$var = $value;
    }
    $this->has_defaults = 1;
    return true;
  }

  # Validates user input. This method should not be overridden in 
  # descendants. See validate_input() instead. Returns false on
  # error and sets $this->error accordingly.
  function validate() {
    if (! is_object($this->form_data)) {
      $this->setup();
    }
    $form_name = array_key_exists("form_name",$_POST) ? $_POST["form_name"] : $GLOBALS["form_name"];
    if ($form_name == $this->classname) {
      $err = $this->form_data->validate("ok");
      if ($err == "ok") {
        return $this->validate_input();
      } else {
	$this->errors = $err;
        $this->validate_input();
        return false;
      }
    } else {
      $this->add_error(sprintf("Unexpected form/class mismatch. form=%s class=%s.",$_POST["form_name"],$this->classname));
      return false;
    }
    return true;
  }

  function SetErrorMessage($err) {
    $this->error = $err;
    $this->errors[] = $err;
  }
  function add_error($err) {
    $this->error = $err;
    $this->errors[] = $err;
  }
  
  # This method should be overridden in descendants, in order to 
  # provided complex validation methods (i.e. field2 should not be
  # empty IF field1 = "other").
  # Should return false on error and set $this->error accordingly.
  function validate_input() {
    $this->error = "";
    return true;
  }

  # These functions store the images on disk as files instead of in the database.
  function getblob_file($filename) {
        $gbq = new $this->database_class;
        $tmpfname = "image/".$gbq->nextid("image").$_FILES[$filename]['name'];
        if ( move_uploaded_file($_FILES[$filename]['tmp_name'],$_SERVER["DOCUMENT_ROOT"].'/'.$tmpfname) ) {
            return $tmpfname;
        } else {
            echo "<p class='error'>Failed to move uploaded image ".$_FILES[$filename]['tmp_name']." to ".$_SERVER["DOCUMENT_ROOT"].'/'.$tmpfname."</p>";
            EventLog("Failed to move uploaded image",$_FILES[$filename]['tmp_name']." to ".$_SERVER["DOCUMENT_ROOT"].'/'.$tmpfname,"Error");
            return "";
        }
  }

  #store blob in the database
  function getblob($fieldname,$tablename="",$keyname="",$key=0) {
	global $blob_key;
	if (!$tablename) $tablename=$this->table;
	if (!$keyname) $keyname=$this->key;
	if ( $_FILES[$fieldname]) {
	        $db = new $this->database_class;
		@list($width,$height,$type,$sizestr,$mimestr,$channels,$bits) = getimagesize ($_FILES[$fieldname]['tmp_name']);
		if (!$mimestr) {
			if ($type) $mimestr=image_type_to_mime_type($type);
			else $mimestr = $_FILES[$fieldname]['type'];
		}
		$name = $_FILES[$fieldname]['name'];
		$extension = image_type_to_extension($type);
		if ($db->type=="pdo")
			$data = file_get_contents($_FILES[$fieldname]['tmp_name']);
		else
			$data = $db->quote(file_get_contents($_FILES[$fieldname]['tmp_name']));
		if (!empty($key)) $sql = "UPDATE"; else $sql = "INSERT INTO";
		$sql .= " image_data SET ";
		$sql .= "tablename = '".magicquote($tablename)."',";
		$sql .= "fieldname = '".magicquote($fieldname)."',";
		if (!empty($key)) $sql .= "keyvalue = '".magicquote($key)."',";
		$sql .= "width = '$width',";
		$sql .= "height = '$height',";
		$sql .= "type = '$type',";
		$sql .= "sizestr = '".magicquote($sizestr)."',";
		$sql .= "mimestr = '".magicquote($mimestr)."',";
		$sql .= "channels = '$channels',";
		$sql .= "bits = '$bits',";
		$sql .= "name = '".magicquote($name)."',";
		$sql .= "extension = '".magicquote($extension)."',";
		$sql .= "image_time = '".date("Y-m-d H:i:s")."'";
		if (!empty($key)) $sql .= "WHERE ".$db->qi($keyname)."='$key'";
		$db->query($sql);
		$db->query("SELECT LAST_INSERT_ID()");
		$db->next_record();
		$blob_key = $db->f(0);
	}
	// Check if file will fit into sql blob
	if (($this->image_store == "disk") or ($_FILES[$fieldname]['size'] > $this->form_data->elements[$fieldname]["ob"]->sqlsize )) {
		// if not attempt to store locally on disk and store the filename in the blob instead.
        	$tmpfname = "image/".$db->nextid("image").$_FILES[$fieldname]['name'];
		if ($_ENV["SubFolder"]) $tmpfname = $_ENV["SubFolder"] . "/" . $tmpfname;
        	if ( move_uploaded_file($_FILES[$fieldname]['tmp_name'],$_SERVER["DOCUMENT_ROOT"].'/'.$tmpfname) ) {
			// if successfully saved return filename of stored image.
                	return $tmpfname;
        	} else {
			// unable to store uploaded file
                        if ($this->image_store == "disk") $msg = "Save mode set to save on Disk not SQL";
                        else $msg = "File too big for SQL datatype ";
                        EventLog($msg, "and unable to move file to $tmpfname.  Uploaded File $name NOT saved.", "Error");
                	return "";
        	}
	} else {
		return $data;
	}
  }
  function show_image($fieldname,$key,$tablename="",$keyname="") {
        if (!$tablename) $tablename=$this->table;
        if (!$keyname) $keyname=$this->key;
	$data = $this->form_data->elements[$fieldname]["ob"]->value;
	$extra = $this->form_data->elements[$fieldname]["ob"]->extrahtml;
	// Is this the actual image data or just a filename?
        if (strlen($data)<64) echo "<img src=\"$data\" alt=\"\" $extra />";
        else if ($key) echo "<img src=\"image.php?t=$tablename&f=$fieldname&k=$keyname&v=$key\" alt=\"\" $extra />";
  }
  function show_image_href($fieldname,$key,$tablename="",$keyname="") {
        if (!$tablename) $tablename=$this->table;
        if (!$keyname) $keyname=$this->key;
	$data = $this->form_data->elements[$fieldname]["ob"]->value;
	if (strlen($data)<64)
        	echo "<a href=\"$data\">Click Here for a Larger Picture</a>";
	else
		if ($key) {
			echo "<a href=\"image.php?t=$tablename&f=$fieldname&k=$keyname&v=$key\">";
			echo "Click Here for a Larger Picture</a>";
		}
  }

  # When images are uploaded, lots of information is available about them before they
  # are stored into blobs in the database.  php function getimagesize does not work on 
  # anything but files so we must save the information we get from it.
  # When we add a new record that contains picture files, the record number is not known
  # until after the record is saved (if you're using auto_increment)
  # This function updates the image_data table with the record numbers of the main table.
  function save_image_keys($keys,$id) {
        $db = new $_ENV["DatabaseClass"];
        foreach($keys as $key) {
		$sql = "UPDATE image_data SET keyvalue='$id' WHERE id='$key'";
	#	echo "<!-- $sql -->\n";
                $db->query($sql);
        }
  }


  # Actually display form fields. This method should not be overridden
  # in descendants. User should provide a file named as the derived 
  # class and with ".ihtml" extension. 
  function display() {
    global $form_name;
    global $auth, $perm, $sess, $cmd, $id, $skin, $Field;
    if (! is_object($this->form_data)) {
      $this->setup();
    }
    
    if (($form_name == $this->classname) || $this->has_defaults) {
      $this->form_data->load_defaults();
    }
    include("phplib/".$this->classname.".ihtml");

    return true;
  }

  function show_page() {

    global $action, $location, $skin, $template_dir;
    global $form_name, $auth;

    if (! is_object($this->form_data)) {
      $this->setup();
    }
    if (($form_name == $this->classname) || $this->has_defaults) {
      $this->form_data->load_defaults();
    }

    $errors = @$this->errors;

    include($template_dir.$action.".html");

    return true;

  }

  # Process user data. This method should not be overridden by descendants.
  # See process_input() and process_default() instead. Returns true on
  # success.
  function process() {
    if ($this->validate()) {
      return $this->process_input();
    } else {
      return $this->process_default();
    }
  }

  # This method should be overridden in descendants. It is executed after
  # validation has taken place. The data passed to the form should be
  # used to fill $this->values array (eventually after a database lookup
  # or whatever).
  function process_input() {
    return true;
  }

  # This method should be overridden in descendants. It is executed when
  # form validation fails or before presenting the form for the first 
  # time. Should be used to inhibit form displaying if data can be
  # extracted from previous actions, divination, penguin fly watching or
  # whatever.
  function process_default() {
    return false;
  }

  # This method should not be overridden. It is intended as the main
  # interface between the application and the form. Once the form has
  # been properly derived to suit designer's needs, applications calls
  # $myform->get_values() and obtains an array containing user supplied
  # data. Failing that, the application should call $form->display()
  # to (re)present the form to the user.
  function get_values() {
    if ($this->process()) {
      return $this->values;
    } else {
      return false;
    }
  }

  # Sort of "destructor". There's no real need to call it, except maybe
  # freeing some memory. May be called from the application, but is 
  # otherwise not executed. Returns true.
  function clear() {
    $this->has_defaults = 0;
    $this->values = array();
    $this->error = "";
    unset($this->form_data);
    return true;
  }

  function freeze($flist="") {				// Added by DaveB
    $this->form_data->freeze($flist);
  }

  function unfreeze($flist="") {                          // Added by DaveB
    $this->form_data->unfreeze($flist);
  }

  function show_item() {
  }

  /* 
  Allow all the values for a dropdown list box (of_select) to be retreived from another table.
  Table - Which table stores the linked data (LinkTable)
  Target - Database field which stores the linked data (LinkField)
  Source - of_select Form Field values into which to load the data (FieldName)
  Extra - of_select Form Field labels for the data (LinkDesc)
  NullValue - Allow an extra data value for Any, All, None selection.
  NullDesc - Extra label for NullValue
  LinkCond - sql to be use in WHERE clause to limit values.
  LinkErrorMsg - Causes the list to begin with "Select..." and Javascript checking that it gets changed to an actual value.

For Example a table might contain

AU, Australia
CA, Canada
NZ, New Zealand
UK, United Kingdom
US, United States of America

These values could popluate the dropdown box for the field "Country".

IMPORTANT:
Don't try to create links with this mechanism if the Target Table contains too many records for a drop down list box.
Espcially important if Source Field form appears in an editable result table as the list box will appear for every record in the table.
TODO: Change this to have some AJAX to handle larger lists.

  */
  function link($Table,$Target="",$Source="",$Extra="",$NullValue="",$NullDesc="",$LinkCond="",$LinkErrorMsg="",$Default="",$Edit="") {
	global $sess, $user_id;
	if (!$Target) $Target=$Table;  #LinkField on form to display dropdown box on.
	if (!$Source) $Source=$Target; #FieldName to retrieve values for list elements from.
	$Src = str_replace(" ","",$Source);
	$Src = str_replace("(","",$Src);
	$Src = str_replace(")","",$Src);
	$Src = str_replace("/","",$Src);
	$Src = str_replace(",","",$Src);
        $db = new $this->database_class;
        $sql = "Select ".$db->qi($Target);
	if ($Extra) $sql .= ", ".$db->qi($Extra);
	$sql .= " from ".$db->qi($Table);
	if ($LinkCond) {
		eval("\$LinkCond = \"$LinkCond\";");
		$sql .= " where " . $LinkCond;
	}
        if ($Extra) $sql .= " Order By ".$db->qi($Extra);
        else $sql .= " Order By ".$db->qi($Target);
        $options = array();
	if ($NullValue!="") {
		if (!$NullDesc) $options[] = $NullValue;
		else $options[] = array("value"=>$NullValue,"label"=>$NullDesc);
	}
	$count = 0;
#echo "<!-- $sql -->";
        $db->query($sql);
        while ($db->next_record()) {
		if ($count++>200) break;
		if ($Extra) {
        		$options[] = array("value"=>$db->f(0),"label"=>$db->f(1));
		} else {
        		$options[] = $db->f(0);
		}
        }
        $ok = false;
        if ($Edit) {
                foreach(explode(",",$Edit) as $need) {
                        if ($sess->have_perm($need)) $ok = $Table;
                }
        } else $ok = $Table;
	if ($ok) {
		if (!file_exists("$Table.php")) $ok = false;
	}
	if ($count>200) {
	  $this->form_data->elements[$Src]["ob"]->LinkedTable=$Table;
	  $this->form_data->elements[$Src]["ob"]->LinkField=$Target;
	  $this->form_data->elements[$Src]["ob"]->LinkDesc=$Extra;
	  $this->form_data->elements[$Src]["ob"]->FormName=$this->classname;
	} else
          $this->form_data->add_element(array(
                "type"=>"select",
                "name"=>$Src,
                "field"=>$Source,
                "valid_e"=>"$LinkErrorMsg",
                "extrahtml"=>"class=dropdownMenu",
                "options"=>$options,
		"value"=>$Default,
		"edit"=>$ok,
	    ));
  }

	# Save the current record in the form to a record in the database table.
        // requires that all defined fields are present in form OR no_edit is set.
        // requires that key field is 'id' OR 'id' is hidden field equal to old_key value.

        // if the primary key IS called 'id' then it should auto increment. (mysql)
        // other databases may require code in this function to increment the primary key.

        // When Adding id doesn't exist and gets a new auto increment INSERT INTO
        // When copying a record, 'id' is blanked out so it behaves like an 'Add'
        // When Saving an existing record, 'id' is used for UPDATE bla SET foo=bar WHERE key = old_key

        // When the primary key is called 'id' the value of 'id' can't be changed, it's a hidden field.
        // When the primary key is not 'id' it is visible and can be changed.


        function save_values($table="",$key="id",$action="") {
	  $db = new $this->database_class;
          if (! is_object($this->form_data)) {
            $this->setup();
          }
	  if (!$table) $table=$this->table;
	  $table = $db->quote_identifier($table);
          if (!$action) $action=$_POST['submit'] ? $_POST['submit'] : @$GLOBALS['submit'];

	  $val = array_key_exists($key,$_POST) ? $_POST[$key] : @$GLOBALS[$key];

          // In tables where the primary key is 'id' and it is a hidden field, it cannot be changed.
          // In tables where the primary key is not 'id' it's value can be changed.
          //    - these tables should not be used for images or referenced by database relations.
          //    - if the value of the primary key changes, references to it will break.

          // $key is the new key submitted in the post (always "id")
          // $this->key is the original primary key (often "id", could be anything)
          // only during an Edit operation should these values be different
	  $oldval = array_key_exists($key,$_POST) ? $_POST[$key] : @$GLOBALS[$key];  // a copy of the primary key in the web form
	  $newval = array_key_exists($this->key,$_POST) ? $_POST[$this->key] : @$GLOBALS[$this->key];  // primary key in database
          // during Add or Copy $newval should be empty
          // during update (eg Edit, AddToCart, Delete) $oldval

	  $data = Array();
	  switch ($action) {
	    case "AddToCart":
		if ($newval) $cart->add_item($newval,$qty,$euid);
		break;
	    case "Delete":
                if ($oldval) {
                        $sql = "DELETE FROM $table WHERE ".$db->qi($key)."='".magicquote($oldval)."'";
			EventLog("SQL - Delete",$sql);
			$db->query($sql);
		}
		break;
	    default:
		$imagekeys = Array();
		if ($oldval) {
                        $sql = "UPDATE $table SET ";
                } else {
                        $sql = "INSERT INTO $table SET ";
                }
		$pdo = $sql;
		$count = 0;
                for (reset($this->form_data->elements);
                 $elrec = current($this->form_data->elements);
                 next($this->form_data->elements))
                {
                        $el = $elrec["ob"];
			$el->value = array_key_exists($el->name,$_POST) ? $_POST[$el->name] : @$GLOBALS[$el->name];
                        $type = substr($el->type,3);
                        if ($el->name=="form_name") $type="skip";
                        if (isset($el->no_edit)) $type="skip";
			if ($el->extrahtml == " onBlur='dollarformat(this)'") $el->value = str_replace("$","",$el->value);
                        if ((isset($el->field)) and ($el->name <> $key)) {
			  $label = ":".$el->name;
                          switch ($type) {
                            case "skip":
                            case "submit":
                                break;
                            case "file":
                                if (substr($_FILES[$el->field]["type"],0,6)=="image/") {
                                        if ($count>0) { $sql .= ", "; $pdo .= ", "; }
					$data[$label] = $this->getblob($el->field);				
					$sql .= $db->qi($el->field)." = '".$data[$label]."'";
					$pdo .= $db->qi($el->field)." = $label";
					$imagekeys[] = $GLOBALS["blob_key"];
                                        $count++;
                                }
                                break;
			    case "date":
                                if ($count>0) { $sql .= ", "; $pdo .= ", "; }
			  	$data[$label] = $el->value;
				$sql .= $db->qi($el->field)." = '".date("Y-m-d H:i:s",strtotime($el->value))."'";
				$pdo .= $db->qi($el->field)." = $label";
                                $count++;
				break;
                            case "checkbox":
                                /* perhaps this should be triggered on $el->multiple instead (dave), so it would apply to select multiple as well not just checkbox*/
				if (isset($el->value)) {$el->value = implode($el->value,",");}
				/* flow into default case on purpose */
                            default:
                                if ($count>0) { $sql .= ", "; $pdo .= ", "; }
			  	$data[$label] = $el->value;
				$sql .= $db->qi($el->field)." = '".magicquote($el->value)."'";
				$pdo .= $db->qi($el->field)." = $label";
                                $count++;
                                break;
                          }
                        }
                }
		if ($oldval) { 
			$sql .= " WHERE ".$db->qi($this->key)." = '".magicquote($oldval)."'";
			$pdo .= " WHERE ".$db->qi($this->key)." = :$key";
			$data[":$key"] = $oldval;
		}
		if ($db->type=="pdo") {
			EventLog("PDO - $action",$pdo."\n".var_export($data,true),"Info");
			$st = $db->prepare($pdo);
			if (!$st->execute($data)) {
				$err = var_export($st->errorInfo(),true);
				echo "<h4>$err</h4>";
				EventLog("PDO - Failed",var_export($err,true),"Error");
			}
		} else {
			EventLog("SQL - $action",$sql,"Info");
			$db->query($sql);
		}
		$id = false;
		if ($newval) {
			$id = $newval;
		} else {
			if ($db->type=="pdo") {
				$id=$db->lastInsertId();
			} else {
				$db->query("SELECT LAST_INSERT_ID()");
				if ($db->next_record()) {
					$id = $db->f(0);
				}
			}
		}
		if ($id) {
			if (count($imagekeys)) $this->save_image_keys($imagekeys,$id);
		}
		return $id;
          } //switch
        }

	# If a form did not validate before saving, then reload the form with the values 
	# that were posted so that the user can correct the values and try submitting again.
 	# Generally this is for browser clients with javascript disabled as most of the time,
	# clients will validate the data in the browser before submiting the form.
	function reload_values() {
		for (reset($this->form_data->elements);
                 $elrec = current($this->form_data->elements);
                 next($this->form_data->elements))
                {
                        $el = $elrec["ob"];
                        $el->value = $_POST[$el->name];
			$vn = $el->name;
			global $$vn;
			$$vn = $_POST[$el->name];
		}
	}

  # Load a record from the database table into the form values.
  function find_values($id,$key="",$table="") {
	$db = new $this->database_class;
        if (! is_object($this->form_data)) {
          $this->setup();
        }
        if (!$id) return false;
	if (!$key) $key = empty($this->key_field) ? $this->key : $this->key_field;
	if (($key=="id") and !ctype_digit($id)) {
		die("Invalid data - expected numeric value");
	} else $id = $db->quote($id);
	if (!$table) $table=$this->table;
	$sql = "SELECT * FROM ".$db->qi($table)." WHERE ".$db->qi($key)."=".$id;
        $db->query($sql);
        if (!$db->next_record()) { 
		#echo "Record not found ($key=$id)"; 
		return; 
	}
        for (reset($this->form_data->elements);
                $elrec = current($this->form_data->elements);
                next($this->form_data->elements)) {
          $el = $elrec["ob"];
          $vn = $el->name;
          global $$vn;
          $$vn = $el->value;
	  $F = isset($el->field) ? $el->field : $el->name ;
          if ( $db->f($F) ) {
            if ( $el->multiple ) {
              $this->form_data->elements[$el->name]["ob"]->value = explode(",",$db->f($F));
            } else {
              $this->form_data->elements[$el->name]["ob"]->value = $db->f($F);
            }
          } else {
                if (($F) and (!array_key_exists($F,$db->Record))) {
		   switch ($F) {
			case "submit":
			case "form_name":
				break;
			default:
                        	echo "<p class=error>Field $F not found.</p>";
		   }
		}
          }
          $$vn = $this->form_data->elements[$el->name]["ob"]->value;
        }
	return true;
  }


  # Assume you have a table with contacts (each belonging to a company)
  # Another table hold the company data.  When you display the company data
  # for a given company, this function can list all the contacts who belong
  # to that company.  If the contacts belong to more than one linked table
  # eg sales_staff and truck_drivers, then both result tables will be displayed.
  # It's the opposite relationship to that provided by the link function above.
  # In this example the link function provides a dropdown box with a list of
  # companies on the contacts or sales_staff or truck_drivers forms.

  function showChildRecords($cols=8) {
    $class = substr($this->classname,0,-4);
    if (strtolower(substr($class,0,3))=="my_") $class=substr($class,3);
    if (strtolower(substr($class,0,2))=="my") $class=substr($class,2);
    if (!$this->database_class) $this->database_class = $_ENV["DB_class"];
    if (!$this->database_class) return;
    $sql = "select * from LinkedTables where LinkTable = '$class' Group By FormName";
    $db = new $this->database_class;
    $db2 = new $this->database_class;
    $db->query($sql);
    while ($db->next_record()) {
        $formname = $db->f("FormName");
        $childclass = substr($formname,0,-4);
	$table = $childclass."Table";
	$fields =  $childclass."_fields";
	echo "<!-- showchildren $formname $table -->\n";
    	if (!class_exists($table)) include("phplib/$childclass.inc");
        $t = new $table;
	if (empty($GLOBALS[$fields])) $t->fields = $t->default; else $t->fields = $GLOBALS[$fields];
        $f = new $formname;
        $f->form_data = new form;
        $f->setup_fields();
        $sql = $t->select($f).sprintf("`%s`='%s' ",$db->f("FieldName"),$GLOBALS[$db->f("LinkField")])." LIMIT 0,100";
        $t->heading = "on";
        $t->add_extra = "$childclass.php";
	unset($t->fields["submit"]);
        $db2->query($sql);
        $t->show_result($db2,"default");
    }
  }

  # check to see if the field is a date or part thereof
  # convert to correct format
  function DateCheck(&$str) {
	$orig=$str;
	if (strlen($str)==3 and in_array($str,explode(",","jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec"))) {
		$s = strtotime($str);
		if (date('Y-m')<date('Y-m',$s)) $str=date('Y-m',strtotime("$str last year"));
		else $str = date('Y-m',$s);
	} else {
		if ($date = strtotime($str)) $str=date("Y-m-d",$date);
	}
#	if (!strpos($orig,date('D',strtotime($str)))) $str=str_replace(date('-d',strtotime($str)),'-',$str);
  }


  # When add_insert line of table (or any form) is used as a search function,
  # This will create an SQL query to search for items like this.
  function search() {
        if (!isset($this->db)) {
                if (!isset($this->database_class)) {
                        $this->database_class = $_ENV["DatabaseClass"];
                }
                $this->db = new $this->database_class;
        }
        $query = "";
	#
	# under most normal circumstances $k is equal to $v["ob"]->field
	# except if there are spaces and or other special chars in the sql fieldname.
	#
        foreach ($this->form_data->elements as $k=>$v) {
                if (($f = @$v["ob"]->field)             // has an sql field
                  and (!empty($_POST[$k]))) {           // and was POSTed.
                        if ($query) $query .= " AND ";
			if (array_key_exists("oper_$k",$_POST)) {
				$condition = $_POST["oper_$k"];
				$data = $_POST[$k];
				$this->DateCheck($data);
                        	$value = $this->db->quote($data);
                        } else {
				if (is_array($data = $_POST[$k])) {
					$data = $data[0];
				} else {
					if (substr($data,0,1)=="$") $data = substr($data,1);
				}
	                        $condition = substr($data,0,1);
				$therest = substr($data,1);
				$this->DateCheck($therest);
				$this->DateCheck($data);
                        	$value = $this->db->quote($therest);
                        	$nvalue = $this->db->quote("%".$therest."%");
			}
			$tf =  $this->db->qi($this->table).".".$this->db->qi($f); /* table.field */
                        switch($condition) {
                            case ">":
                            case "<":
                            case "=":
                            case "!=":
                                $query .= "$tf $condition $value";
                                break;
                            case "!":
                                $query .= "$tf NOT LIKE $nvalue";
                                break;
                            default:
                                $query .= "$tf LIKE ".$this->db->quote("%".$data."%");
                        }

                }
        }
	if (!$query) $query="1";
        return $query;
  }
  function order_by($sortorder) {
        if (!isset($this->db)) {
                if (!isset($this->database_class)) {
                        $this->database_class = $_ENV["DatabaseClass"];
                }
                $this->db = new $this->database_class;
        }
	$desc = "";
	if (substr(strtolower($sortorder),-5)==" desc") {
		$desc = " desc";
		$sortorder = substr($sortorder,0,-5);
	}
	if (!$sortorder) $sortorder = "id";
	if (substr($sortorder,0,2)=="_t") $field = $sortorder; else
	$field = $this->form_data->elements[$sortorder]["ob"]->field;
	if (!empty($this->sort_function_maps[$field]))
		return $this->sort_function_maps[$field]."(".$this->db->qi($field).")".$desc;
	else
		return $this->db->qi($field).$desc;
  }

  function javascript() {
	echo "<!-- Javascript libraries required by this form -->\n";
	echo "<script type='text/javascript' src='/js/scripts.js'></script>\n";
	if (! is_object($this->form_data)) {
		$this->setup();
	}
	if ($this->form_data->calendar) {
		if (!isset($_ENV["js_cal_sent"])) {
echo "<script type='text/javascript' src='/js/datefunc.js'>
//Parts taken from ts_picker.js
//Original Script by Denis Gritcyuk: tspicker@yahoo.com
//Submitted to JavaScript Kit (http://javascriptkit.com)
//Visit http://www.javascriptkit.com/script/script2/timestamp.shtml for this script
</script>\n";
		}
	}
	if ($this->form_data->editor) {
		if (empty($_ENV["js_editor_sent"])) {
			switch($_ENV["editor"]) {
				case "ckfinder":
					echo "<script type='text/javascript' src='/ckeditor/ckeditor.js'></script>\n";
					echo "<script type='text/javascript' src='/ckfinder/ckfinder.js'></script>\n";
					break;
				case "ckeditor":
					echo "<script type='text/javascript' src='/ckeditor/ckeditor.js'></script>\n";
					break;
			}
		}
	}
  }


}

/* We're using these functions that were introduced in PHP 5.2 */
/* redefined them here in case we're running an older version */

if ( !function_exists('image_type_to_extension') ) {

    function image_type_to_extension ($type, $dot = true)
    {
        $e = array ( 1 => 'gif', 'jpeg', 'png', 'swf', 'psd', 'bmp',
            'tiff', 'tiff', 'jpc', 'jp2', 'jpf', 'jb2', 'swc',
            'aiff', 'wbmp', 'xbm');
        return ($dot ? '.' : '') . $e[$type];
    }
}

if ( !function_exists('image_type_to_mime_type') ) {

    function image_type_to_mime_type ($type)
    {
        $m = array ( 1 => 'image/gif', 'image/jpeg', 'image/png',
            'application/x-shockwave-flash', 'image/psd', 'image/bmp',
            'image/tiff', 'image/tiff', 'application/octet-stream',
            'image/jp2', 'application/octet-stream', 'application/octet-stream',
            'application/x-shockwave-flash', 'image/iff', 'image/vnd.wap.wbmp', 'image/xbm');
        return $m[$type];
    }
}


?>
